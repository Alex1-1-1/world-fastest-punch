// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  submissions Submission[]
  reports   Report[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Submission {
  id          String   @id @default(cuid())
  userId      String
  imageUrl    String
  thumbnailUrl String
  watermarkedUrl String?
  speed       Float?   // km/h
  comment     String?  // 例えコメント
  status      SubmissionStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reports  Report[]
  rankings Ranking[]
}

model Report {
  id           String   @id @default(cuid())
  submissionId String
  reporterId   String
  reason       ReportReason
  description  String?
  status       ReportStatus @default(PENDING)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)
  reporter   User       @relation(fields: [reporterId], references: [id], onDelete: Cascade)
}

model Ranking {
  id           String   @id @default(cuid())
  submissionId String
  category     RankingCategory
  position     Int
  week         Int
  year         Int
  createdAt    DateTime @default(now())

  submission Submission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@unique([category, week, year, position])
}

enum SubmissionStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ReportReason {
  INAPPROPRIATE_CONTENT
  VIOLENCE
  SPAM
  COPYRIGHT
  OTHER
}

enum ReportStatus {
  PENDING
  REVIEWED
  RESOLVED
  DISMISSED
}

enum RankingCategory {
  VERY_FAST      // とても速い (100+ km/h)
  QUITE_FAST     // まあまあ速い (80-99 km/h)
  MODERATE       // 普通 (60-79 km/h)
  SLOW           // 遅い (40-59 km/h)
  VERY_SLOW      // とても遅い (0-39 km/h)
}



